=== app/_components/TileGrid.tsx ===
const tiles = [
  { title: "Home Extension", desc: "Rozszerzenie przestrzeni", icon: "üè†" },
  { title: "Ogr√≥d klasyczny", desc: "Ca≈Çoroczny ogr√≥d", icon: "‚òÄÔ∏è" },
  { title: "Ogr√≥d sezonowy", desc: "Na ciep≈Çe miesiƒÖce", icon: "‚ùÑÔ∏è" },
  { title: "Pergola", desc: "Konstrukcja ogrodowa", icon: "üåø" },
  { title: "Pomoc w wyborze", desc: "Doradzimy najlepsze", icon: "‚ùì" }
];

export default function TileGrid() {
  return (
    <section className="py-16 px-4">
      <div className="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {tiles.map((tile, i) => (
          <div key={i} className="bg-white rounded-xl shadow-lg p-6 hover:shadow-xl transition-shadow">
            <div className="text-4xl mb-3">{tile.icon}</div>
            <h3 className="text-xl font-bold mb-2">{tile.title}</h3>
            <p className="text-gray-600">{tile.desc}</p>
          </div>
        ))}
      </div>
    </section>
  );
}

=== app/_components/HeroSection.tsx ===
export default function HeroSection() {
  return (
    <div className="relative h-96 bg-gradient-to-r from-orange-400 to-orange-600 flex items-center justify-center">
      <div className="text-center text-white">
        <h1 className="text-5xl md:text-7xl font-bold mb-4">VERANDANA</h1>
        <p className="text-xl md:text-2xl">Nowoczesne ogrody zimowe</p>
      </div>
    </div>
  );
}

=== app/layout.tsx ===
import "./globals.css";
export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="pl">
      <body className="min-h-screen bg-white">{children}</body>
    </html>
  );
}

=== app/api/send-lead/route.ts ===
import { NextResponse } from 'next/server';

type Body = {
  name: string; email: string; phone: string; postalCode: string; type: string;
  deadline?: string; message?: string;
  files?: { name: string; url?: string; size?: number }[];
  _honey?: string; // honeypot pole musi byƒá puste
};

const RATE = new Map<string, { count: number; ts: number }>();
const WINDOW_MS = 10 * 60 * 1000; // 10 min
const MAX_REQ = 5;

function ok(v: unknown): v is string { return typeof v === 'string' && v.trim().length > 0; }

async function getResend() {
  const key = process.env.RESEND_API_KEY;
  if (!ok(key)) throw new Error('RESEND_API_KEY missing');
  const { Resend } = await import('resend');
  return new Resend(key);
}

export async function POST(req: Request) {
  try {
    const ip = (req.headers.get('x-forwarded-for') || '').split(',')[0] || '0.0.0.0';
    const now = Date.now();
    const r = RATE.get(ip);
    if (!r || now - r.ts > WINDOW_MS) RATE.set(ip, { count: 1, ts: now });
    else if (r.count >= MAX_REQ) return NextResponse.json({ error: 'Rate limit' }, { status: 429 });
    else RATE.set(ip, { count: r.count + 1, ts: r.ts });

    const body = (await req.json()) as Body;
    const required: (keyof Body)[] = ['name','email','phone','postalCode','type'];
    for (const k of required) if (!ok(body[k])) return NextResponse.json({ error: `Missing ${k}` }, { status: 400 });

    if (ok(body._honey)) return NextResponse.json({ success: true }, { status: 200 });

    const resend = await getResend();

    const subject = `Nowe zapytanie ‚Äî ${body.type} ‚Äî ${body.postalCode}`;
    const text = [
      `Imiƒô i nazwisko: ${body.name}`,
      `E-mail: ${body.email}`,
      `Telefon: ${body.phone}`,
      `Kod pocztowy: ${body.postalCode}`,
      `Typ: ${body.type}`,
      `Deadline: ${body.deadline ?? '-'}`,
      `Wiadomo≈õƒá: ${body.message ?? '-'}`,
      `Pliki: ${(body.files?.map((f)=>`${f.name} (${f.size||0}B) ${f.url||''}`).join(', ')) || '-'}`,
    ].join('\n');

    const html = `
      <div style="font-family:Inter,system-ui,Arial;line-height:1.6">
        <h2 style="margin:0 0 12px">Nowe zapytanie Verandana</h2>
        <table cellpadding="6" style="border-collapse:collapse">
          <tr><td><b>Imiƒô i nazwisko</b></td><td>${body.name}</td></tr>
          <tr><td><b>E-mail</b></td><td>${body.email}</td></tr>
          <tr><td><b>Telefon</b></td><td>${body.phone}</td></tr>
          <tr><td><b>Kod pocztowy</b></td><td>${body.postalCode}</td></tr>
          <tr><td><b>Typ</b></td><td>${body.type}</td></tr>
          <tr><td><b>Deadline</b></td><td>${body.deadline ?? '-'}</td></tr>
          <tr><td valign="top"><b>Wiadomo≈õƒá</b></td><td>${(body.message ?? '-').replace(/\n/g,'<br/>')}</td></tr>
          <tr><td valign="top"><b>Pliki</b></td><td>
            ${
              Array.isArray(body.files) && body.files.length
              ? body.files.map((f)=>`<div>‚Ä¢ <a href="${f.url||'#'}">${f.name}</a> ${f.size?`(${f.size}B)`:''}</div>`).join('')
              : '-'
            }
          </td></tr>
        </table>
      </div>`.trim();

    const { error } = await resend.emails.send({
      from: 'Verandana <onboarding@resend.dev>',
      to: ['roman@verandana.pl'],
      subject,
      text,
      html
    });

    if (error) {
      console.error('Resend error:', error);
      return NextResponse.json({ error: error.message }, { status: 500 });
    }
    return NextResponse.json({ success: true });
  } catch (e: any) {
    console.error('API error:', e?.message || e);
    const msg = e?.message?.includes('RESEND_API_KEY') ? 'Server misconfig' : 'Unknown error';
    return NextResponse.json({ error: msg }, { status: 500 });
  }
}

=== app/page.tsx ===
'use client'
import { useState } from 'react'

export default function Page() {
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [errors, setErrors] = useState<Record<string,string>>({})

  function validate(form: HTMLFormElement) {
    const data = Object.fromEntries(new FormData(form).entries())
    const e: Record<string,string> = {}
    const emailRe = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    const zipRe = /^[0-9]{2}-?[0-9]{3}$/

    if (!data.name) e.name = 'Podaj imiƒô i nazwisko'
    if (!data.email || !emailRe.test(String(data.email))) e.email = 'Podaj poprawny e-mail'
    if (!data.phone) e.phone = 'Podaj telefon'
    if (!data.postalCode || !zipRe.test(String(data.postalCode))) e.postalCode = 'Kod np. 44-100'
    if (!data.type) e.type = 'Wybierz typ'
    if (!data.consent) e.consent = 'Zaznacz zgodƒô'
    return { ok: Object.keys(e).length === 0, e, data }
  }

  async function handleSubmit(ev: React.FormEvent<HTMLFormElement>) {
    ev.preventDefault()
    if (isSubmitting) return
    const form = ev.currentTarget
    const { ok, e, data } = validate(form)
    setErrors(e)
    if (!ok) return

    setIsSubmitting(true)
    try {
      const payload = {
        name: data.name,
        email: data.email,
        phone: data.phone,
        postalCode: data.postalCode,
        deadline: data.deadline || '',
        type: data.type,
        message: data.message || '',
        files: [],
        _honey: (data as any)._honey || ''
      }
      const res = await fetch('/api/send-lead', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      })
      if (!res.ok) throw new Error('B≈ÇƒÖd wysy≈Çki')
      alert('Dziƒôkujemy! Wiadomo≈õƒá wys≈Çana.')
      form.reset()
      setErrors({})
    } catch (err) {
      alert('Nie uda≈Ço siƒô wys≈Çaƒá. Spr√≥buj ponownie.')
      console.error(err)
    } finally {
      setIsSubmitting(false)
    }
  }

  return (
    <main className="max-w-3xl mx-auto p-6">
      <h1 className="text-3xl font-bold mb-6">Zapytanie</h1>

      <form onSubmit={handleSubmit} noValidate>
        <input type="text" name="name" placeholder="Imiƒô i nazwisko" className="block w-full mb-2 p-3 border rounded" />
        {errors.name && <p className="text-red-500 text-sm mb-2">{errors.name}</p>}

        <input type="email" name="email" placeholder="E-mail" className="block w-full mb-2 p-3 border rounded" />
        {errors.email && <p className="text-red-500 text-sm mb-2">{errors.email}</p>}

        <input type="tel" name="phone" placeholder="Telefon" className="block w-full mb-2 p-3 border rounded" />
        {errors.phone && <p className="text-red-500 text-sm mb-2">{errors.phone}</p>}

        <input type="text" name="postalCode" placeholder="Kod pocztowy" className="block w-full mb-2 p-3 border rounded" />
        {errors.postalCode && <p className="text-red-500 text-sm mb-2">{errors.postalCode}</p>}

        <input type="date" name="deadline" className="block w-full mb-2 p-3 border rounded" />

        <select name="type" className="block w-full mb-2 p-3 border rounded">
          <option value="">Wybierz typ</option>
          <option>Home Extension</option>
          <option>Winter Garden</option>
          <option>Patio Roof</option>
        </select>
        {errors.type && <p className="text-red-500 text-sm mb-2">{errors.type}</p>}

        <textarea name="message" placeholder="Wiadomo≈õƒá" className="block w-full mb-2 p-3 border rounded" rows={5}></textarea>

        <input type="text" name="_honey" className="hidden" tabIndex={-1} autoComplete="off" />

        <label className="flex items-start gap-2 mb-4">
          <input type="checkbox" name="consent" />
          <span>Wyra≈ºam zgodƒô na kontakt w celu przygotowania oferty.</span>
        </label>
        {errors.consent && <p className="text-red-500 text-sm mb-4">{errors.consent}</p>}

        <button
          type="submit"
          disabled={isSubmitting}
          className={`px-8 py-3 text-white font-semibold rounded ${isSubmitting ? 'bg-gray-400' : 'bg-blue-600 hover:bg-blue-700'}`}
        >
          {isSubmitting ? 'Wysy≈Çanie‚Ä¶' : 'Wy≈õlij zapytanie'}
        </button>
      </form>
    </main>
  )
}
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    console.log('[GENESIS KROK 1] Funkcja handleSubmit zosta≈Ça uruchomiona.');

    const newErrors: any = {};

    if (!formData.name || formData.name.length < 2) {
      newErrors.name = 'Imiƒô jest wymagane (min. 2 znaki)';
    }
    if (!formData.email || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      newErrors.email = 'Email jest wymagany';
    }
    if (!formData.phone || !/^[0-9]{9,12}$/.test(formData.phone.replace(/\s/g, ''))) {
      newErrors.phone = 'Telefon jest wymagany';
    }
    if (!formData.postalCode || !/^[0-9]{2}-[0-9]{3}$/.test(formData.postalCode)) {
      newErrors.postalCode = 'Kod pocztowy jest wymagany';
    }
    if (!selectedType) {
      newErrors.type = 'Wybierz typ konstrukcji';
    }
    if (!consent) {
      newErrors.consent = 'Zgoda jest wymagana';
    }

    setErrors(newErrors);

    if (Object.keys(newErrors).length > 0) {
      console.error('[GENESIS B≈ÅƒÑD] Walidacja nie powiod≈Ça siƒô. B≈Çƒôdy:', newErrors);
      alert('Formularz zawiera b≈Çƒôdy. Sprawd≈∫ poprawno≈õƒá wszystkich wymaganych p√≥l.');
      return;
    }

    console.log('[GENESIS KROK 2] Walidacja p√≥l zako≈Ñczona pomy≈õlnie.');
    setIsSubmitting(true);

    try {
      console.log('[GENESIS KROK 3] Pr√≥ba wys≈Çania danych na serwer...');
      const response = await fetch('/api/send-lead', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...formData,
          type: selectedType,
          date: selectedDate,
          comment: comment
        })
      });

      if (response.ok) {
        console.log('[GENESIS SUKCES] Dane wys≈Çane pomy≈õlnie.');
        alert('Dziƒôkujemy! Wkr√≥tce siƒô odezwiemy.');
      } else {
        console.error('[GENESIS B≈ÅƒÑD] Serwer zwr√≥ci≈Ç b≈ÇƒÖd.', await response.json());
        alert('B≈ÇƒÖd wysy≈Çania. Spr√≥buj ponownie.');
      }
    } catch (error) {
      console.error('[GENESIS KRYTYCZNY B≈ÅƒÑD] WystƒÖpi≈Ç b≈ÇƒÖd podczas wysy≈Çania:', error);
      alert('B≈ÇƒÖd wysy≈Çania. Spr√≥buj ponownie.');
    } finally {
      setIsSubmitting(false);
    }
  };

=== app/globals.css ===
@tailwind base;
@tailwind components;
@tailwind utilities;

