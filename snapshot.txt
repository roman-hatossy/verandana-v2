=== app/regulamin/page.tsx ===
export default function TermsPage() {
  return (
    <div className="bg-white min-h-screen">
      <div className="max-w-4xl mx-auto py-12 px-6">
        <h1 className="text-3xl font-bold mb-6">Regulamin ≈õwiadczenia us≈Çug</h1>
        <div className="prose lg:prose-xl space-y-4">
          <h2 className="text-xl font-semibold mt-6">¬ß1. Postanowienia og√≥lne</h2>
          <p>
            1. Niniejszy regulamin okre≈õla zasady korzystania ze strony internetowej verandana.pl 
            oraz zasady ≈õwiadczenia us≈Çug przez VERANDANA sp. z o.o.<br />
            2. W≈Ça≈õcicielem strony jest VERANDANA sp. z o.o. z siedzibƒÖ w Gliwicach.
          </p>
          <h2 className="text-xl font-semibold mt-6">¬ß2. Zakres us≈Çug</h2>
          <p>
            Us≈Çugodawca ≈õwiadczy us≈Çugi w zakresie:<br />
            ‚Ä¢ Projektowania ogrod√≥w zimowych<br />
            ‚Ä¢ Monta≈ºu konstrukcji ogrodowych<br />
            ‚Ä¢ Doradztwa technicznego<br />
            ‚Ä¢ Serwisu gwarancyjnego i pogwarancyjnego
          </p>
          <h2 className="text-xl font-semibold mt-6">¬ß3. Gwarancja</h2>
          <p>
            ‚Ä¢ Konstrukcja aluminiowa: 10 lat<br />
            ‚Ä¢ Szyby i uszczelki: 5 lat<br />
            ‚Ä¢ Elementy ruchome: 2 lata<br />
            ‚Ä¢ Monta≈º: 3 lata
          </p>
          <h2 className="text-xl font-semibold mt-6">¬ß4. Reklamacje</h2>
          <p>
            1. Reklamacje nale≈ºy zg≈Çaszaƒá pisemnie lub mailowo<br />
            2. Czas rozpatrzenia: do 14 dni<br />
            3. W przypadku uznania reklamacji - naprawa w ciƒÖgu 30 dni
          </p>
        </div>
      </div>
    </div>
  );
}

=== app/_components/TileGrid.tsx ===
const tiles = [
  { title: "Home Extension", desc: "Rozszerzenie przestrzeni", icon: "üè†" },
  { title: "Ogr√≥d klasyczny", desc: "Ca≈Çoroczny ogr√≥d", icon: "‚òÄÔ∏è" },
  { title: "Ogr√≥d sezonowy", desc: "Na ciep≈Çe miesiƒÖce", icon: "‚ùÑÔ∏è" },
  { title: "Pergola", desc: "Konstrukcja ogrodowa", icon: "üåø" },
  { title: "Pomoc w wyborze", desc: "Doradzimy najlepsze", icon: "‚ùì" }
];

export default function TileGrid() {
  return (
    <section className="py-16 px-4">
      <div className="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {tiles.map((tile, i) => (
          <div key={i} className="bg-white rounded-xl shadow-lg p-6 hover:shadow-xl transition-shadow">
            <div className="text-4xl mb-3">{tile.icon}</div>
            <h3 className="text-xl font-bold mb-2">{tile.title}</h3>
            <p className="text-gray-600">{tile.desc}</p>
          </div>
        ))}
      </div>
    </section>
  );
}

=== app/_components/HeroSection.tsx ===
export default function HeroSection() {
  return (
    <div className="relative h-96 bg-gradient-to-r from-orange-400 to-orange-600 flex items-center justify-center">
      <div className="text-center text-white">
        <h1 className="text-5xl md:text-7xl font-bold mb-4">VERANDANA</h1>
        <p className="text-xl md:text-2xl">Nowoczesne ogrody zimowe</p>
      </div>
    </div>
  );
}

=== app/layout.tsx ===
import './globals.css'
import type { Metadata } from 'next'
import { Toaster } from 'sonner' // GENESIS H0: Toaster dla powiadomie≈Ñ

export const metadata: Metadata = {
  title: 'Verandana',
  description: 'Zapytanie ofertowe Verandana'
}

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="pl">
      <body>
        {children}
        <Toaster richColors closeButton position="top-center" /> {/* GENESIS H0: aktywacja toasta */}
      </body>
    </html>
  )
}

=== app/polityka-prywatnosci/page.tsx ===
export default function PrivacyPolicyPage() {
  return (
    <div className="bg-white min-h-screen">
      <div className="max-w-4xl mx-auto py-12 px-6">
        <h1 className="text-3xl font-bold mb-6">Polityka Prywatno≈õci</h1>
        <div className="prose lg:prose-xl space-y-4">
          <h2 className="text-xl font-semibold mt-6">1. Administrator danych</h2>
          <p>
            Administratorem Twoich danych osobowych jest VERANDANA sp. z o.o. z siedzibƒÖ w Gliwicach (44-151) 
            przy ul. Miodunki 3, NIP: 6312707409, REGON: 524383183.
          </p>
          <h2 className="text-xl font-semibold mt-6">2. Dane kontaktowe</h2>
          <p>
            W sprawach zwiƒÖzanych z przetwarzaniem danych osobowych mo≈ºna kontaktowaƒá siƒô:<br />
            ‚Ä¢ Email: roman@verandana.pl<br />
            ‚Ä¢ Telefon: +48 605 834 422<br />
            ‚Ä¢ Adres: Miodunki 3, 44-151 Gliwice
          </p>
          <h2 className="text-xl font-semibold mt-6">3. Cele przetwarzania danych</h2>
          <p>
            Przetwarzamy Twoje dane osobowe w nastƒôpujƒÖcych celach:<br />
            ‚Ä¢ Odpowied≈∫ na zapytanie ofertowe (podstawa: art. 6 ust. 1 lit. b RODO)<br />
            ‚Ä¢ Przygotowanie i przedstawienie oferty handlowej<br />
            ‚Ä¢ Kontakt telefoniczny lub mailowy w sprawie z≈Ço≈ºonego zapytania<br />
            ‚Ä¢ Cele marketingowe - za TwojƒÖ zgodƒÖ (art. 6 ust. 1 lit. a RODO)
          </p>
          <h2 className="text-xl font-semibold mt-6">4. Twoje prawa</h2>
          <p>
            Masz prawo do:<br />
            ‚Ä¢ Dostƒôpu do swoich danych osobowych<br />
            ‚Ä¢ Sprostowania nieprawid≈Çowych danych<br />
            ‚Ä¢ Usuniƒôcia danych ("prawo do bycia zapomnianym")<br />
            ‚Ä¢ Ograniczenia przetwarzania<br />
            ‚Ä¢ Przenoszenia danych<br />
            ‚Ä¢ Sprzeciwu wobec przetwarzania<br />
            ‚Ä¢ Wycofania zgody w dowolnym momencie<br />
            ‚Ä¢ Wniesienia skargi do Prezesa UODO
          </p>
        </div>
      </div>
    </div>
  );
}

=== app/api/send-lead/route.ts ===
import { NextResponse, NextRequest } from 'next/server';
import { Resend } from 'resend';

const resend = new Resend(process.env.RESEND_API_KEY);

export async function POST(req: NextRequest) {
  try {
    const data = await req.json();

    if (!data.name || !data.email || !data.phone || !data.consent) {
      return NextResponse.json({ error: 'Brak wszystkich wymaganych p√≥l.' }, { status: 400 });
    }

    const attachments = [];
    if (data.files && Array.isArray(data.files)) {
      for (const file of data.files) {
        const buffer = Buffer.from(file.content.split(',')[1], 'base64');
        attachments.push({
          filename: file.name,
          content: buffer,
        });
      }
    }

    await resend.emails.send({
      from: 'Verandana <formularz@verandana.pl>',
      to: ['roman@verandana.pl'],
      reply_to: data.email,
      subject: `Nowy Lead z za≈ÇƒÖcznikami: ${data.name}`,
      html: `
        <h2>Nowy lead z formularza</h2>
        <p><strong>Imiƒô:</strong> ${data.name}</p>
        <p><strong>Email:</strong> ${data.email}</p>
        <p><strong>Telefon:</strong> ${data.phone}</p>
        <p><strong>Typ:</strong> ${data.type || 'Nie wybrano'}</p>
        <p><strong>Kod pocztowy:</strong> ${data.postalCode || 'Brak'}</p>
        <p><strong>Wiadomo≈õƒá:</strong> ${data.message || 'Brak'}</p>
        <p><strong>Liczba za≈ÇƒÖcznik√≥w:</strong> ${attachments.length}</p>
      `,
      attachments: attachments,
    });
    
    return NextResponse.json({ message: 'Wiadomo≈õƒá wys≈Çana pomy≈õlnie.' });

  } catch (error) {
    console.error("API ERROR:", error);
    return NextResponse.json({ error: 'WystƒÖpi≈Ç b≈ÇƒÖd podczas wysy≈Çania.' }, { status: 500 });
  }
}

=== app/api/upload-blob/route.ts ===
import { handleUpload, type HandleUploadBody } from '@vercel/blob/client';
import { NextResponse } from 'next/server';

export async function POST(request: Request): Promise<NextResponse> {
  const body = (await request.json()) as HandleUploadBody;
  try {
    const jsonResponse = await handleUpload({
      body,
      request,
      onBeforeGenerateToken: async (pathname: string) => {
        return {
          allowedContentTypes: ['image/jpeg', 'image/png', 'image/gif', 'application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'],
          tokenPayload: JSON.stringify({ pathname }),
        };
      },
      onUploadCompleted: async ({ blob, tokenPayload }) => {
        console.log('Plik pomy≈õlnie wys≈Çany:', blob);
      },
    });
    return NextResponse.json(jsonResponse);
  } catch (error) {
    return NextResponse.json({ error: (error as Error).message }, { status: 400 });
  }
}

=== app/page.tsx ===
'use client';
import React, { useState } from 'react';
import InquiryForm from '../components/InquiryForm';
import Footer from '../components/Footer';

const gardenTypes = [
  { 
    id: 'home-extension', 
    name: 'Home Extension', 
    desc: 'Nowoczesna bry≈Ça z p≈Çaskim dachem',
    image: '/images/home-extension-day.webp'
  },
  { 
    id: 'classic-warm', 
    name: 'Klasyczny ciep≈Çy', 
    desc: 'Szlachetny detal i elegancja',
    image: '/images/ogrod-klasyczny-day.webp'
  },
  { 
    id: 'seasonal-cold', 
    name: 'Sezonowy zimny', 
    desc: 'Idealny na wiosnƒô i lato',
    image: '/images/ogrod-sezonowy-day.webp'
  },
  { 
    id: 'pergola', 
    name: 'Pergola Bioclimatic', 
    desc: 'Lamele regulowane',
    image: '/images/pergola-bioclimatic-day.webp'
  },
  { 
    id: 'not-sure', 
    name: 'Nie wiem', 
    desc: 'Potrzebujƒô porady eksperta',
    image: '/images/help-me.webp'
  }
];

export default function HomePage() {
  const [selectedType, setSelectedType] = useState('');

  return (
    <div className="bg-gray-50 min-h-screen">
      <header className="py-8 px-6 bg-white">
        <div className="max-w-7xl mx-auto">
          <h1 className="text-4xl md:text-5xl font-bold text-slate-900 text-center mb-4">
            Wprowad≈∫ do domu harmoniƒô i nowƒÖ przestrze≈Ñ do ≈ºycia.
          </h1>
          <p className="text-lg text-slate-600 text-center max-w-3xl mx-auto mb-12">
            Odkryj, jak ogr√≥d zimowy otwarty na naturƒô staje siƒô sercem Twojego domu przez ca≈Çy rok.
          </p>
          
          <div className="text-center mb-8">
            <h2 className="text-2xl font-semibold text-gray-800 mb-6">
              Jaki typ konstrukcji Ciƒô interesuje?
            </h2>
            <div className="grid grid-cols-2 md:grid-cols-5 gap-4 max-w-6xl mx-auto">
              {gardenTypes.map(type => (
                <button 
                  key={type.id} 
                  type="button" 
                  onClick={() => setSelectedType(type.id)}
                  className={`relative overflow-hidden rounded-lg transition-all transform hover:scale-105 ${
                    selectedType === type.id 
                      ? 'ring-4 ring-blue-500 shadow-xl' 
                      : 'shadow-lg hover:shadow-xl'
                  }`}
                >
                  <div className="aspect-w-4 aspect-h-3 bg-gray-200">
                    <img 
                      src={type.image} 
                      alt={type.name}
                      className="w-full h-40 object-cover"
                    />
                  </div>
                  <div className="p-3 bg-white">
                    <h3 className="font-semibold text-sm text-gray-900">{type.name}</h3>
                    <p className="text-xs text-gray-600 mt-1">{type.desc}</p>
                  </div>
                </button>
              ))}
            </div>
          </div>
        </div>
      </header>
      
      <main className="max-w-6xl mx-auto p-6">
        <InquiryForm preselectedType={selectedType} />
      </main>
      
      <Footer />
    </div>
  );
}

=== app/globals.css ===
@tailwind base;
@tailwind components;
@tailwind utilities;

=== components/TileGrid.tsx ===
// File: components/TileGrid.tsx
import React from 'react';
import Image from 'next/image';

// Zaktualizowana definicja danych z precyzyjnymi ≈õcie≈ºkami do obraz√≥w .webp (wersja 'day')
const tileData = [
  {
    title: 'Home Extension',
    description: 'Nowoczesna bry≈Ça z p≈Çaskim dachem',
    imageUrl: '/images/home-extension-day.webp',
  },
  {
    title: 'Klasyczny ciep≈Çy',
    description: 'Szlachetny detal i elegancja',
    imageUrl: '/images/ogrod-klasyczny-day.webp',
  },
  {
    title: 'Sezonowy zimny',
    description: 'Idealny na wiosnƒô i lato',
    imageUrl: '/images/ogrod-sezonowy-day.webp',
  },
  {
    title: 'Pergola Bioclimatic',
    description: 'Lamele regulowane',
    imageUrl: '/images/pergola-bioclimatic-day.webp',
  },
  {
    title: 'Nie wiem',
    description: 'Potrzebujƒô porady eksperta',
    imageUrl: '/images/help-me.webp', 
  },
];

const TileGrid = () => {
  return (
    <section className="w-full max-w-6xl mx-auto px-4 py-12 md:py-16">
      <h2 className="text-3xl font-bold text-center text-gray-800 mb-10">
        Jaki typ konstrukcji Ciƒô interesuje?
      </h2>
      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-6">
        {tileData.map((tile) => (
          <div
            key={tile.title}
            className="border border-gray-200 rounded-lg overflow-hidden transition-all duration-300 ease-in-out hover:shadow-xl hover:-translate-y-1 cursor-pointer bg-white group"
          >
            <div className="relative w-full h-40">
              <Image
                src={tile.imageUrl}
                alt={tile.title}
                layout="fill"
                objectFit="cover"
                className="transition-transform duration-300 group-hover:scale-105"
              />
            </div>
            <div className="p-4">
              <h3 className="text-base font-semibold text-gray-900 mb-1">{tile.title}</h3>
              <p className="text-sm text-gray-500">{tile.description}</p>
            </div>
          </div>
        ))}
      </div>
    </section>
  );
};

export default TileGrid;
=== components/Footer.tsx ===
import Link from 'next/link';

export default function Footer() {
  const currentYear = new Date().getFullYear();

  return (
    <footer className="bg-gray-900 text-white py-12 mt-20">
      <div className="max-w-6xl mx-auto px-6">
        {/* Logo WebP */}
        <div className="flex justify-center mb-6">
          <img 
            src="/images/verandana_logo_losos.webp" 
            alt="Verandana"
            style={{ height: '60px', width: 'auto' }}
          />
        </div>
        
        {/* Dane firmy */}
        <div className="text-center mb-6">
          <p className="font-bold text-lg">VERANDANA sp. z o.o.</p>
          <p className="text-sm text-gray-400">Miodunki 3, 44-151 Gliwice</p>
          <p className="text-sm text-gray-400">NIP: 6312707409 | REGON: 524383183</p>
        </div>
        
        {/* Dane kontaktowe */}
        <div className="text-center mb-6">
          <a href="tel:+48605834422" className="text-white hover:text-orange-400 transition-colors">
            Tel: +48 605 834 422
          </a>
          <span className="mx-2 text-gray-500">|</span>
          <a href="mailto:roman@verandana.pl" className="text-white hover:text-orange-400 transition-colors">
            roman@verandana.pl
          </a>
        </div>
        
        {/* Linki prawne */}
        <div className="border-t border-gray-700 pt-6 mt-6 flex justify-center gap-6 text-sm">
          <Link href="/polityka-prywatnosci" className="text-gray-300 hover:text-white transition-colors">
            Polityka Prywatno≈õci
          </Link>
          <Link href="/regulamin" className="text-gray-300 hover:text-white transition-colors">
            Regulamin
          </Link>
        </div>
        
        {/* Copyright */}
        <p className="text-xs text-gray-500 text-center mt-6">
          &copy; {currentYear} VERANDANA sp. z o.o. Wszelkie prawa zastrze≈ºone.
        </p>
      </div>
    </footer>
  );
}

=== components/FileUpload.tsx ===
'use client';
import { upload } from '@vercel/blob/client';
import { useState, useRef } from 'react';
import { toast } from 'sonner';

export interface FileData {
  url: string;
  filename: string;
  size: number;
}

type Props = {
  files: FileData[];
  onFilesChange: (files: FileData[]) => void;
};

export default function FileUpload({ files, onFilesChange }: Props) {
  const inputFileRef = useRef<HTMLInputElement>(null);
  const [isUploading, setIsUploading] = useState(false);

  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFiles = event.target.files;
    if (!selectedFiles) return;

    setIsUploading(true);
    toast.info(`Rozpoczynam wysy≈Çanie ${selectedFiles.length} plik√≥w...`);

    try {
      const newBlobs = await Promise.all(
        Array.from(selectedFiles).map(file => 
          upload(file.name, file, {
            access: 'public',
            handleUploadUrl: '/api/upload-blob',
          })
        )
      );
      const newFiles: FileData[] = newBlobs.map((blob, index) => ({
        url: blob.url,
        filename: selectedFiles[index].name,
        size: selectedFiles[index].size,
      }));
      onFilesChange([...files, ...newFiles]);
      toast.success('Wszystkie pliki zosta≈Çy pomy≈õlnie wys≈Çane!');
    } catch (error) {
      console.error(error);
      toast.error('WystƒÖpi≈Ç b≈ÇƒÖd podczas wysy≈Çania pliku.');
    } finally {
      setIsUploading(false);
      if (inputFileRef.current) {
        inputFileRef.current.value = '';
      }
    }
  };

  const humanSize = (bytes: number) => {
    if (bytes === 0) return '0 B';
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return `${parseFloat((bytes / Math.pow(1024, i)).toFixed(2))} ${['B', 'KB', 'MB', 'GB'][i]}`;
  }

  return (
    <div>
      <div
        className={`flex w-full cursor-pointer flex-col items-center justify-center rounded-lg border border-dashed border-gray-300 p-4 text-center ${isUploading ? 'bg-gray-100 cursor-not-allowed' : 'hover:bg-gray-50'}`}
        onClick={() => !isUploading && inputFileRef.current?.click()}
      >
        <input ref={inputFileRef} type="file" multiple hidden onChange={handleFileChange} disabled={isUploading} />
        <p className="text-sm">{isUploading ? 'Przesy≈Çanie...' : 'Kliknij, aby wybraƒá pliki'}</p>
        <p className="mt-1 text-xs text-gray-500">Do 5 plik√≥w, max 10MB ka≈ºdy</p>
      </div>
      {files.length > 0 && (
        <ul className="mt-3 space-y-2">
          {files.map((file) => (
            <li key={file.url} className="rounded-md border border-gray-200 p-2 flex items-center justify-between">
              <div className="min-w-0">
                <a href={file.url} target="_blank" rel="noopener noreferrer" className="truncate text-sm font-medium text-blue-600 hover:underline">{file.filename}</a>
                <div className="text-xs text-gray-500">{humanSize(file.size)}</div>
              </div>
              <span className="text-green-500 text-sm">‚úî</span>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}

=== components/Calendar.tsx ===
'use client';
import * as React from 'react';

type LegacyProps = {
  isOpen?: boolean;
  selectedDate?: Date | null;
  onDateSelect?: (date: Date | null) => void;
  onClose?: () => void;
  currentMonth?: number;
  currentYear?: number;
  onMonthChange?: (_direction: 'prev' | 'next') => void;
};

type NewProps = {
  value?: Date | null;
  onChange?: (d: Date | null) => void;
  min?: string;
  max?: string;
  name?: string;
  required?: boolean;
  className?: string;
};
type Props = LegacyProps & NewProps;

function toInputValue(d?: Date | null) {
  if (!d) return '';
  const y = d.getFullYear();
  const m = String(d.getMonth() + 1).padStart(2, '0');
  const day = String(d.getDate()).padStart(2, '0');
  return `${y}-${m}-${day}`;
}

function fromInputValue(v: string): Date | null {
  if (!v) return null;
  const [y, m, d] = v.split('-').map(Number);
  const dt = new Date(y, (m ?? 1) - 1, d ?? 1);
  return isNaN(dt.getTime()) ? null : dt;
}

export default function Calendar(props: Props) {
  const { selectedDate, onDateSelect, value, onChange, min, max, name, required, className } = props;
  const controlled = typeof value !== 'undefined' || typeof selectedDate !== 'undefined';
  const [local, setLocal] = React.useState<Date | null>(value ?? selectedDate ?? null);
  
  React.useEffect(() => {
    if (typeof value !== 'undefined') setLocal(value ?? null);
    else if (typeof selectedDate !== 'undefined') setLocal(selectedDate ?? null);
  }, [value, selectedDate]);
  
  const onPick = (e: React.ChangeEvent<HTMLInputElement>) => {
    const picked = fromInputValue(e.target.value);
    if (!controlled) setLocal(picked);
    onChange?.(picked);
    onDateSelect?.(picked);
  };
  
  return (
    <input
      type="date"
      value={toInputValue(local)}
      onChange={onPick}
      min={min}
      max={max}
      name={name}
      required={required}
      className={className ?? 'block w-full rounded-md border border-gray-300 px-3 py-2 text-sm'}
    />
  );
}

=== components/InquiryForm.tsx ===
'use client'

import React, { useState, useEffect } from 'react'
import Calendar from './Calendar'
import FileUpload, { type FileData } from './FileUpload'
import { validateEmail, validatePhone, validatePostalCode, formatPhone, formatPostalCode } from '../lib/validation'
import { toast } from 'sonner'

const fileToBase64 = (file: File): Promise<string> => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => resolve(reader.result as string);
    reader.onerror = error => reject(error);
  });
};

interface ValidationErrors {
  email?: string;
  phone?: string;
  postalCode?: string;
}

export default function InquiryForm() {
  const [selectedType, setSelectedType] = useState<string>('')
  const [selectedDate, setSelectedDate] = useState<Date | null>(null)
  const [files, setFiles] = useState<FileData[]>([])
  const [formProgress, setFormProgress] = useState(0)
  const [name, setName] = useState('')
  const [email, setEmail] = useState('')
  const [phone, setPhone] = useState('')
  const [postalCode, setPostalCode] = useState('')
  const [comment, setComment] = useState('')
  const [consent, setConsent] = useState(false)
  const [errors, setErrors] = useState<ValidationErrors>({})
  const [touched, setTouched] = useState<Record<string, boolean>>({})
  const [isSubmitting, setIsSubmitting] = useState(false)

  const validateField = (field: 'email' | 'phone' | 'postalCode', value: string) => {
    const newErrors = { ...errors }
    let validationResult;
    if (field === 'email') validationResult = validateEmail(value);
    if (field === 'phone') validationResult = validatePhone(value);
    if (field === 'postalCode') validationResult = validatePostalCode(value);
    
    if (validationResult && !validationResult.isValid && touched[field]) {
      newErrors[field] = validationResult.error;
    } else {
      delete newErrors[field];
    }
    setErrors(newErrors);
  }
  const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => { const v = e.target.value; setEmail(v); validateField('email', v) }
  const handlePhoneChange = (e: React.ChangeEvent<HTMLInputElement>) => { const v = formatPhone(e.target.value); setPhone(v); validateField('phone', v) }
  const handlePostalCodeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const v = formatPostalCode(e.target.value);
    if (v.length <= 6) { setPostalCode(v); validateField('postalCode', v) }
  }
  const handleBlur = (field: 'email' | 'phone' | 'postalCode') => { 
    setTouched(prev => ({ ...prev, [field]: true }));
    const value = field === 'email' ? email : field === 'phone' ? phone : postalCode;
    validateField(field, value);
  }
  useEffect(() => {
    let progress = 0;
    const fields = [name, email, phone, consent, selectedType];
    const total = fields.length;
    fields.forEach(field => { if (field) progress++; });
    setFormProgress(Math.round((progress / total) * 100));
  }, [name, email, phone, consent, selectedType]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    toast.info('Przygotowujƒô pliki do wys≈Çania...');

    const finalErrors: ValidationErrors = {};
    if (!validateEmail(email).isValid) finalErrors.email = validateEmail(email).error;
    if (!validatePhone(phone).isValid) finalErrors.phone = validatePhone(phone).error;
    if (postalCode && !validatePostalCode(postalCode).isValid) {
        finalErrors.postalCode = validatePostalCode(postalCode).error;
    }
    setErrors(finalErrors);
    setTouched({ email: true, phone: true, postalCode: true });

    if (Object.keys(finalErrors).length > 0 || !consent) {
        toast.error('Proszƒô poprawiƒá b≈Çƒôdy w formularzu i wyraziƒá zgodƒô.');
        setIsSubmitting(false);
        return;
    }

    const filePayloads = await Promise.all(
      files.map(async (fileData) => {
        const content = await fileToBase64(fileData.file);
        return { name: fileData.name, content };
      })
    );

    const formData = { 
      name, email, phone, postalCode, 
      type: selectedType, date: selectedDate, 
      message: comment, consent,
      files: filePayloads
    };

    try {
        toast.info('Wysy≈Çam zapytanie...');
        const response = await fetch('/api/send-lead', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData),
        });

        const result = await response.json();
        if (!response.ok) {
            throw new Error(result.error || 'WystƒÖpi≈Ç b≈ÇƒÖd serwera.');
        }
        toast.success('Dziƒôkujemy! Twoje zapytanie zosta≈Ço wys≈Çane.');
    } catch (error) {
        console.error("B≈ÇƒÖd wysy≈Çania formularza:", error);
        toast.error((error as Error).message || 'Nie uda≈Ço siƒô wys≈Çaƒá formularza. Spr√≥buj ponownie.');
    } finally {
        setIsSubmitting(false);
    }
  }

  const gardenTypes = [{ id: 'home-extension', name: 'Home Extension', desc: 'Rozszerzenie przestrzeni' },{ id: 'classic-warm', name: 'Ogr√≥d klasyczny', desc: 'Ca≈Çoroczny, ogrzewany' },{ id: 'seasonal-cold', name: 'Ogr√≥d sezonowy', desc: 'U≈ºytkowany w ciep≈Çych miesiƒÖcach' },{ id: 'pergola', name: 'Pergola', desc: 'Otwarta konstrukcja' },{ id: 'not-sure', name: 'Nie wiem', desc: 'Pomoc w wyborze' }];
  
  return (
    <form onSubmit={handleSubmit} className="max-w-4xl mx-auto p-4 sm:p-8 relative bg-white rounded-2xl shadow-2xl border border-slate-200">
        <div className="mb-8">
            <h2 className="text-3xl font-bold text-center text-slate-800 mb-2">Zapytanie o wycenƒô</h2>
            <p className="text-center text-slate-500">Wype≈Çnij formularz, a my przygotujemy dla Ciebie ofertƒô.</p>
            <div className="flex justify-between items-center mt-6 mb-2">
                <span className="text-sm font-medium text-gray-700">Postƒôp</span>
                <span className="text-sm font-medium text-blue-600">{formProgress}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2.5">
                <div className="bg-blue-600 h-2.5 rounded-full transition-all duration-500" style={{ width: `${formProgress}%` }} />
            </div>
        </div>
        <div className="space-y-8">
            <div>
            <label className="block text-lg font-semibold text-gray-800 mb-4">1. Wybierz typ konstrukcji *</label>
            <div className="grid grid-cols-2 md:grid-cols-5 gap-3">
                {gardenTypes.map(type => (
                <button key={type.id} type="button" onClick={() => setSelectedType(type.id)}
                    className={`w-full p-3 text-center rounded-lg border-2 transition-all ${selectedType === type.id ? 'border-blue-600 bg-blue-50 ring-2 ring-blue-500' : 'border-gray-200 hover:border-gray-400'}`}>
                    <div className="font-semibold text-sm">{type.name}</div>
                    <div className="text-xs text-gray-500">{type.desc}</div>
                </button>
                ))}
            </div>
            </div>
            <div>
            <h3 className="text-lg font-semibold text-gray-800 mb-4">2. Dane kontaktowe</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
                <div>
                    <label className="block text-sm font-medium text-gray-700">Imiƒô i nazwisko *</label>
                    <input type="text" value={name} onChange={(e) => setName(e.target.value)} className="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500" required />
                </div>
                <div>
                    <label className="block text-sm font-medium text-gray-700">E-mail *</label>
                    <input type="email" value={email} onChange={handleEmailChange} onBlur={() => handleBlur('email')} className={`mt-1 w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 ${errors.email ? 'border-red-500 ring-red-500' : 'border-gray-300 focus:ring-blue-500'}`} required />
                    {errors.email && (<p className="mt-1 text-sm text-red-600">{errors.email}</p>)}
                </div>
                <div>
                    <label className="block text-sm font-medium text-gray-700">Telefon *</label>
                    <input type="tel" value={phone} onChange={handlePhoneChange} onBlur={() => handleBlur('phone')} placeholder="123 456 789" className={`mt-1 w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 ${errors.phone ? 'border-red-500 ring-red-500' : 'border-gray-300 focus:ring-blue-500'}`} required />
                    {errors.phone && (<p className="mt-1 text-sm text-red-600">{errors.phone}</p>)}
                </div>
                <div>
                    <label className="block text-sm font-medium text-gray-700">Kod pocztowy (opcjonalnie)</label>
                    <input type="text" value={postalCode} onChange={handlePostalCodeChange} onBlur={() => handleBlur('postalCode')} placeholder="00-000" className={`mt-1 w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 ${errors.postalCode ? 'border-red-500 ring-red-500' : 'border-gray-300 focus:ring-blue-500'}`} />
                    {errors.postalCode && (<p className="mt-1 text-xs text-red-600">{errors.postalCode}</p>)}
                </div>
            </div>
            </div>
            <div>
            <h3 className="text-lg font-semibold text-gray-800 mb-4">3. Dodatkowe informacje (opcjonalnie)</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Planowany termin monta≈ºu</label>
                    <Calendar selectedDate={selectedDate} onDateSelect={setSelectedDate} />
                </div>
                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Dodaj zdjƒôcia lub dokumenty</label>
                    <FileUpload files={files} onFilesChange={setFiles} onError={(m) => toast.error(m)} />
                </div>
                <div className="md:col-span-2">
                    <label className="block text-sm font-medium text-gray-700">Wiadomo≈õƒá</label>
                    <textarea value={comment} onChange={(e) => setComment(e.target.value)} rows={4} className="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Opisz swoje oczekiwania..."></textarea>
                </div>
            </div>
        </div>
        </div>
        <div className="mt-8 border-t pt-6">
            <div className="flex items-start">
            <div className="flex h-6 items-center">
                <input id="consent" name="consent" type="checkbox" checked={consent} onChange={(e) => setConsent(e.target.checked)} className="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-600"/>
            </div>
            <div className="ml-3 text-sm leading-6">
                <label htmlFor="consent" className="font-medium text-gray-900">Wyra≈ºam zgodƒô na kontakt w celu przygotowania oferty *</label>
            </div>
            </div>
        </div>
        <div className="mt-8 text-center">
            <button type="submit" className="px-10 py-4 rounded-lg font-semibold text-white transition-all bg-blue-600 hover:bg-blue-700 shadow-lg hover:shadow-xl focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:bg-gray-400 disabled:cursor-not-allowed disabled:shadow-none" disabled={!consent || isSubmitting}>
                {isSubmitting ? 'Wysy≈Çanie...' : 'Wy≈õlij zapytanie'}
            </button>
        </div>
    </form>
  )
}

=== components/InquiryForm.hooks.ts ===
// File: components/InquiryForm.hooks.ts
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
// KOREKTA: Zmieniono 'leadSchema' na 'inquirySchema'
import { inquirySchema, type LeadDTO } from '../lib/schemas';

export const useInquiryForm = () => useForm<LeadDTO>({
  // KOREKTA: Zmieniono 'leadSchema' na 'inquirySchema'
  resolver: zodResolver(inquirySchema),
  defaultValues: {
    name: '',
    phone: '',
    email: '',
    postalCode: '',
    message: '',
    company: '',
    consent: false,
  },
});
=== lib/validation.ts ===
export const validateEmail = (email: string): { isValid: boolean; error?: string } => {
  if (!email) return { isValid: false, error: 'Email jest wymagany' }
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
  if (!emailRegex.test(email)) {
    return { isValid: false, error: 'Nieprawid≈Çowy format email' }
  }
  return { isValid: true }
}

export const validatePhone = (phone: string): { isValid: boolean; error?: string } => {
  if (!phone) return { isValid: false, error: 'Telefon jest wymagany' }
  const cleanPhone = phone.replace(/[\s\-\(\)]/g, '')
  const phoneRegex = /^(?:\+48)?(?:\d{9})$/
  if (!phoneRegex.test(cleanPhone)) {
    return { isValid: false, error: 'Podaj 9 cyfr (np. 123456789 lub +48123456789)' }
  }
  return { isValid: true }
}

export const validatePostalCode = (code: string): { isValid: boolean; error?: string } => {
  if (!code || code.length < 6) return { isValid: true } // Opcjonalne pole, waliduj tylko je≈õli jest w pe≈Çni wpisane
  const postalRegex = /^\d{2}-\d{3}$/
  if (!postalRegex.test(code)) {
    return { isValid: false, error: 'Format: XX-XXX (np. 00-950)' }
  }
  return { isValid: true }
}

export const formatPhone = (value: string): string => {
  const cleaned = value.replace(/\D/g, '')
  if (cleaned.length <= 3) return cleaned
  if (cleaned.length <= 6) return `${cleaned.slice(0, 3)} ${cleaned.slice(3)}`
  return `${cleaned.slice(0, 3)} ${cleaned.slice(3, 6)} ${cleaned.slice(6, 9)}`
}

export const formatPostalCode = (value: string): string => {
  const cleaned = value.replace(/\D/g, '')
  if (cleaned.length <= 2) return cleaned
  return `${cleaned.slice(0, 2)}-${cleaned.slice(2, 5)}`
}

=== lib/schemas.ts ===
// File: lib/schemas.ts
import { z } from 'zod';

export const inquirySchema = z.object({
  name: z.string().min(2, { message: 'Imiƒô musi mieƒá co najmniej 2 znaki.' }),
  phone: z.string().min(9, { message: 'Numer telefonu musi mieƒá co najmniej 9 cyfr.' }),
  email: z.string().email({ message: 'Proszƒô podaƒá poprawny adres e-mail.' }),
  postalCode: z.string().regex(/^\d{2}-\d{3}$/, { message: 'Kod pocztowy musi byƒá w formacie XX-XXX.' }),
  message: z.string().min(10, { message: 'Wiadomo≈õƒá musi mieƒá co najmniej 10 znak√≥w.' }).max(500),
  company: z.string().optional(),
  type: z.enum(['home_extension', 'conservatory', 'pergola', 'carport', 'other'], {
    // KOREKTA: Zastosowano prawid≈ÇowƒÖ sk≈Çadniƒô z jednym kluczem 'message' dla b≈Çƒôdu walidacji.
    message: 'Proszƒô wybraƒá prawid≈Çowy typ konstrukcji.',
  }),
  consent: z.boolean().refine(val => val === true, {
    message: 'Zgoda na przetwarzanie danych jest wymagana.',
  }),
  preferredDate: z.string().optional(),
});

// Typ LeadDTO wyeksportowany poza obiektem schematu.
export type LeadDTO = z.infer<typeof inquirySchema>;
