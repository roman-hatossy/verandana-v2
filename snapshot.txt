=== app/_components/TileGrid.tsx ===
const tiles = [
  { title: "Home Extension", desc: "Rozszerzenie przestrzeni", icon: "üè†" },
  { title: "Ogr√≥d klasyczny", desc: "Ca≈Çoroczny ogr√≥d", icon: "‚òÄÔ∏è" },
  { title: "Ogr√≥d sezonowy", desc: "Na ciep≈Çe miesiƒÖce", icon: "‚ùÑÔ∏è" },
  { title: "Pergola", desc: "Konstrukcja ogrodowa", icon: "üåø" },
  { title: "Pomoc w wyborze", desc: "Doradzimy najlepsze", icon: "‚ùì" }
];

export default function TileGrid() {
  return (
    <section className="py-16 px-4">
      <div className="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {tiles.map((tile, i) => (
          <div key={i} className="bg-white rounded-xl shadow-lg p-6 hover:shadow-xl transition-shadow">
            <div className="text-4xl mb-3">{tile.icon}</div>
            <h3 className="text-xl font-bold mb-2">{tile.title}</h3>
            <p className="text-gray-600">{tile.desc}</p>
          </div>
        ))}
      </div>
    </section>
  );
}

=== app/_components/HeroSection.tsx ===
export default function HeroSection() {
  return (
    <div className="relative h-96 bg-gradient-to-r from-orange-400 to-orange-600 flex items-center justify-center">
      <div className="text-center text-white">
        <h1 className="text-5xl md:text-7xl font-bold mb-4">VERANDANA</h1>
        <p className="text-xl md:text-2xl">Nowoczesne ogrody zimowe</p>
      </div>
    </div>
  );
}

=== app/layout.tsx ===
import './globals.css'
import type { Metadata } from 'next'
import { Toaster } from 'sonner' // GENESIS H0: Toaster dla powiadomie≈Ñ

export const metadata: Metadata = {
  title: 'Verandana',
  description: 'Zapytanie ofertowe Verandana'
}

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="pl">
      <body>
        {children}
        <Toaster richColors closeButton position="top-center" /> {/* GENESIS H0: aktywacja toasta */}
      </body>
    </html>
  )
}

=== app/api/send-lead/route.ts ===
import { NextResponse, NextRequest } from 'next/server';
import { Resend } from 'resend';

// Inicjalizacja Resend. Upewnij siƒô, ≈ºe zmienna ≈õrodowiskowa jest ustawiona na produkcji.
const resendApiKey = process.env.RESEND_API_KEY;
if (!resendApiKey) {
    console.error("KRYTYCZNY B≈ÅƒÑD KONFIGURACJI: Brak RESEND_API_KEY.");
}
const resend = new Resend(resendApiKey);

// Uproszczona walidacja (Docelowo nale≈ºy u≈ºyƒá Zod)
function validateInput(data: any): boolean {
  if (!data.name || !data.email || !data.phone || !data.consent) return false;
  if (!/\S+@\S+\.\S+/.test(data.email)) return false;
  return true;
}

export async function POST(req: NextRequest) {
  // Globalny blok try...catch dla stabilno≈õci i logowania
  try {
    // 1. Parsowanie cia≈Ça ≈ºƒÖdania
    const data = await req.json();

    // 2. Honeypot (Security)
    if ((data as any)._honey) {
      console.log("Honeypot triggered.");
      return NextResponse.json({ message: 'Wiadomo≈õƒá wys≈Çana pomy≈õlnie.' }, { status: 200 });
    }

    // 3. Walidacja (Integrity)
    if (!validateInput(data)) {
      console.warn("B≈ÇƒÖd walidacji danych.", data);
      // HTTP 400 Bad Request
      return NextResponse.json({ message: 'Niepoprawne dane formularza.' }, { status: 400 });
    }

    // 4. Wykonanie (Email Sending)
    const emailResult = await resend.emails.send({
      from: 'Verandana <onboarding@resend.dev>',
      to: ['roman@verandana.pl'],
      subject: `Nowy Lead z Landing Page Verandana - ${data.name}`,
      html: `
        <strong>Imiƒô:</strong> ${data.name}<br>
        <strong>Email:</strong> ${data.email}<br>
        <strong>Telefon:</strong> ${data.phone}<br>
        <strong>Typ:</strong> ${data.type || 'Brak'}<br>
        <strong>Kod pocztowy:</strong> ${data.postalCode || 'Brak'}<br>
        <strong>Wiadomo≈õƒá:</strong> ${data.message || 'Brak'}<br>
      `,
    });

    // Sprawdzenie odpowiedzi z Resend
    if (emailResult.error) {
      // Logowanie specyficznego b≈Çƒôdu Resend
      console.error("RESEND API ERROR:", emailResult.error);
      throw new Error(`Resend failed: ${emailResult.error.message}`);
    }

    // HTTP 200 OK - Sukces
    return NextResponse.json({ message: 'Wiadomo≈õƒá wys≈Çana pomy≈õlnie.', id: emailResult.data?.id }, { status: 200 });

  } catch (error) {
    // Logowanie b≈Çƒôdu (Kluczowe dla diagnozy - pojawi siƒô w logach serwera)
    console.error("KRYTYCZNY B≈ÅƒÑD API /send-lead:", error);
    
    // HTTP 500 Internal Server Error
    return NextResponse.json({ message: 'WystƒÖpi≈Ç wewnƒôtrzny b≈ÇƒÖd serwera.' }, { status: 500 });
  }
}

=== app/page.tsx ===
'use client'
import { useState } from 'react'

export default function Page() {
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [errors, setErrors] = useState<Record<string,string>>({})

  function validate(form: HTMLFormElement) {
    const data = Object.fromEntries(new FormData(form).entries())
    const e: Record<string,string> = {}
    const emailRe = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    const zipRe = /^[0-9]{2}-?[0-9]{3}$/

    if (!data.name) e.name = 'Podaj imiƒô i nazwisko'
    if (!data.email || !emailRe.test(String(data.email))) e.email = 'Podaj poprawny e-mail'
    if (!data.phone) e.phone = 'Podaj telefon'
    if (!data.postalCode || !zipRe.test(String(data.postalCode))) e.postalCode = 'Kod np. 44-100'
    if (!data.type) e.type = 'Wybierz typ'
    if (!data.consent) e.consent = 'Zaznacz zgodƒô'
    return { ok: Object.keys(e).length === 0, e, data }
  }

  async function handleSubmit(ev: React.FormEvent<HTMLFormElement>) {
    ev.preventDefault()
    if (isSubmitting) return
    const form = ev.currentTarget
    const { ok, e, data } = validate(form)
    setErrors(e)
    if (!ok) return

    setIsSubmitting(true)
    try {
      const payload = {
        name: data.name,
        email: data.email,
        phone: data.phone,
        postalCode: data.postalCode,
        deadline: data.deadline,
        type: data.type,
        message: data.message,
        consent: data.consent,
        _honey: (data as any)._honey,
      }
      const response = await fetch('/api/send-lead', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      })
      
      const result = await response.json();

      if (response.ok) {
        alert(result.message || 'Sukces! Wiadomo≈õƒá wys≈Çana.');
        form.reset()
        setErrors({})
      } else {
        console.error("API Error:", result);
        alert(`B≈ÇƒÖd: ${result.message || 'WystƒÖpi≈Ç nieznany b≈ÇƒÖd.'}`);
      }
    } catch (err) {
      console.error("Network/Fetch Error:", err)
      alert('WystƒÖpi≈Ç b≈ÇƒÖd sieci. Sprawd≈∫ po≈ÇƒÖczenie internetowe.')
    } finally {
      setIsSubmitting(false)
    }
  }

  return (
    <main className="max-w-3xl mx-auto p-6">
      <h1 className="text-3xl font-bold mb-6">Zapytanie</h1>
      <form onSubmit={handleSubmit} noValidate>
        <input type="text" name="name" placeholder="Imiƒô i nazwisko" className="block w-full mb-2 p-3 border rounded" />
        {errors.name && <p className="text-red-500 text-sm mb-2">{errors.name}</p>}
        <input type="email" name="email" placeholder="E-mail" className="block w-full mb-2 p-3 border rounded" />
        {errors.email && <p className="text-red-500 text-sm mb-2">{errors.email}</p>}
        <input type="tel" name="phone" placeholder="Telefon" className="block w-full mb-2 p-3 border rounded" />
        {errors.phone && <p className="text-red-500 text-sm mb-2">{errors.phone}</p>}
        <input type="text" name="postalCode" placeholder="Kod pocztowy" className="block w-full mb-2 p-3 border rounded" />
        {errors.postalCode && <p className="text-red-500 text-sm mb-2">{errors.postalCode}</p>}
        <input type="date" name="deadline" className="block w-full mb-2 p-3 border rounded" />
        <select name="type" className="block w-full mb-2 p-3 border rounded">
          <option value="">Wybierz typ</option>
          <option>Home Extension</option>
          <option>Winter Garden</option>
          <option>Patio Roof</option>
        </select>
        {errors.type && <p className="text-red-500 text-sm mb-2">{errors.type}</p>}
        <textarea name="message" placeholder="Wiadomo≈õƒá" className="block w-full mb-2 p-3 border rounded" rows={5}></textarea>
        <input type="text" name="_honey" className="hidden" tabIndex={-1} autoComplete="off" />
        <label className="flex items-start gap-2 mb-4">
          <input type="checkbox" name="consent" />
          <span>Wyra≈ºam zgodƒô na kontakt w celu przygotowania oferty.</span>
        </label>
        {errors.consent && <p className="text-red-500 text-sm mb-4">{errors.consent}</p>}
        <button
          type="submit"
          disabled={isSubmitting}
          className={`px-8 py-3 text-white font-semibold rounded ${isSubmitting ? 'bg-gray-400' : 'bg-blue-600 hover:bg-blue-700'}`}
        >
          {isSubmitting ? 'Wysy≈Çanie‚Ä¶' : 'Wy≈õlij zapytanie'}
        </button>
      </form>
    </main>
  )
}

=== app/globals.css ===
@tailwind base;
@tailwind components;
@tailwind utilities;

