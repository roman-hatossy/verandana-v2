'use client'
import { useState, useRef } from 'react'
import { toast } from 'sonner'

const initialState = { name: '', email: '', phone: '', postalCode: '', deadline: '', type: '', message: '', consent: false, _honey: '' }

export default function Page() {
  const [formData, setFormData] = useState(initialState)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [errors, setErrors] = useState<Record<string,string>>({})
  
  const refs: { [key: string]: React.RefObject<any> } = {
    name: useRef<HTMLInputElement>(null),
    email: useRef<HTMLInputElement>(null),
    phone: useRef<HTMLInputElement>(null),
    postalCode: useRef<HTMLInputElement>(null),
    type: useRef<HTMLSelectElement>(null),
    consent: useRef<HTMLInputElement>(null),
  }

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target;
    const isCheckbox = type === 'checkbox';
    setFormData(prev => ({ ...prev, [name]: isCheckbox ? (e.target as HTMLInputElement).checked : value }));
  };
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (isSubmitting) return;

    setErrors({});
    const validationErrors: Record<string,string> = {};
    if (!formData.name) validationErrors.name = 'Podaj imię i nazwisko';
    if (!formData.email || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) validationErrors.email = 'Podaj poprawny e-mail';
    if (!formData.phone) validationErrors.phone = 'Podaj telefon';
    if (!formData.postalCode || !/^[0-9]{2}-?[0-9]{3}$/.test(formData.postalCode)) validationErrors.postalCode = 'Kod np. 44-100';
    if (!formData.type) validationErrors.type = 'Wybierz typ';
    if (!formData.consent) validationErrors.consent = 'Zaznacz zgodę';

    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      toast.error('Formularz zawiera błędy. Proszę poprawić podświetlone pola.');
      const firstErrorKey = Object.keys(validationErrors)[0];
      if (firstErrorKey && refs[firstErrorKey]?.current) {
        refs[firstErrorKey].current.scrollIntoView({ behavior: 'smooth', block: 'center' });
        setTimeout(() => refs[firstErrorKey].current.focus(), 300);
      }
      return;
    }
    
    setIsSubmitting(true);
    try {
      const response = await fetch('/api/send-lead', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData),
      });

      const result = await response.json();
      if (!response.ok) {
        throw new Error(result.error || 'Wystąpił nieznany błąd serwera.');
      }

      toast.success('Dziękujemy! Twoja wiadomość została wysłana.');
      setFormData(initialState);
      
    } catch (error: any) {
      toast.error(`Błąd wysyłania: ${error.message}`);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
      <main className="max-w-3xl w-full bg-white p-8 rounded-2xl shadow-lg">
        <h1 className="text-4xl font-bold text-center mb-2 text-slate-800">Zapytanie o wycenę</h1>
        <p className="text-center text-slate-600 mb-8">Wypełnij formularz, a my skontaktujemy się z Tobą wkrótce.</p>
        
        <form onSubmit={handleSubmit} noValidate className="space-y-6">
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label htmlFor="name" className="block text-sm font-medium text-slate-700 mb-1">Imię i nazwisko</label>
              <input ref={refs.name} type="text" name="name" id="name" value={formData.name} onChange={handleInputChange} className={`block w-full p-3 border rounded-md shadow-sm ${errors.name ? 'border-red-500' : 'border-slate-300'}`} />
              {errors.name && <p className="text-red-500 text-xs mt-1">{errors.name}</p>}
            </div>
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-slate-700 mb-1">E-mail</label>
              <input ref={refs.email} type="email" name="email" id="email" value={formData.email} onChange={handleInputChange} className={`block w-full p-3 border rounded-md shadow-sm ${errors.email ? 'border-red-500' : 'border-slate-300'}`} />
              {errors.email && <p className="text-red-500 text-xs mt-1">{errors.email}</p>}
            </div>
            <div>
              <label htmlFor="phone" className="block text-sm font-medium text-slate-700 mb-1">Telefon</label>
              <input ref={refs.phone} type="tel" name="phone" id="phone" value={formData.phone} onChange={handleInputChange} className={`block w-full p-3 border rounded-md shadow-sm ${errors.phone ? 'border-red-500' : 'border-slate-300'}`} />
              {errors.phone && <p className="text-red-500 text-xs mt-1">{errors.phone}</p>}
            </div>
            <div>
              <label htmlFor="postalCode" className="block text-sm font-medium text-slate-700 mb-1">Kod pocztowy</label>
              <input ref={refs.postalCode} type="text" name="postalCode" id="postalCode" value={formData.postalCode} onChange={handleInputChange} className={`block w-full p-3 border rounded-md shadow-sm ${errors.postalCode ? 'border-red-500' : 'border-slate-300'}`} />
              {errors.postalCode && <p className="text-red-500 text-xs mt-1">{errors.postalCode}</p>}
            </div>
          </div>

          <div>
            <label htmlFor="type" className="block text-sm font-medium text-slate-700 mb-1">Typ konstrukcji</label>
            <select ref={refs.type} name="type" id="type" value={formData.type} onChange={handleInputChange} className={`block w-full p-3 border rounded-md shadow-sm ${errors.type ? 'border-red-500' : 'border-slate-300'}`}>
              <option value="">Wybierz typ</option>
              <option>Home Extension</option>
              <option>Winter Garden</option>
              <option>Patio Roof</option>
            </select>
            {errors.type && <p className="text-red-500 text-xs mt-1">{errors.type}</p>}
          </div>

          <div>
            <label htmlFor="message" className="block text-sm font-medium text-slate-700 mb-1">Wiadomość (opcjonalnie)</label>
            <textarea name="message" id="message" value={formData.message} onChange={handleInputChange} className="block w-full p-3 border border-slate-300 rounded-md shadow-sm" rows={4}></textarea>
          </div>

          <input type="text" name="_honey" value={formData._honey} onChange={handleInputChange} className="hidden" />

          <div>
            <label className="flex items-center gap-3">
              <input ref={refs.consent} type="checkbox" name="consent" checked={formData.consent} onChange={handleInputChange} className={`h-4 w-4 rounded border-slate-300 text-orange-600 focus:ring-orange-500 ${errors.consent ? 'border-red-500' : ''}`} />
              <span className="text-sm text-slate-600">Wyrażam zgodę na kontakt w celu przygotowania oferty.</span>
            </label>
            {errors.consent && <p className="text-red-500 text-xs mt-1">{errors.consent}</p>}
          </div>

          <button
            type="submit"
            disabled={isSubmitting}
            className="w-full py-3 px-6 border border-transparent rounded-md shadow-sm text-lg font-medium text-white bg-slate-800 hover:bg-orange-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 disabled:bg-slate-400 transition-colors"
          >
            {isSubmitting ? 'Wysyłanie…' : 'Wyślij zapytanie'}
          </button>
        </form>
      </main>
    </div>
  )
}
